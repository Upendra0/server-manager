expression.info.type.static=Statique
expression.info.static.description=Condition statique
expression.info.static.syntax={} Champ Unifi\u00E9 op\u00E9rateur {valeur}

expression.info.type.contains=Contient ()
expression.info.contains.description=Renvoie true si la cha\u00EEne d\'argument contient la s\u00E9quence sp\u00E9cifique de valeurs char.
expression.info.contains.syntax=contient (valeur - Champ Unifi\u00E9)

expression.info.type.extract=Extrait
expression.info.extract.description=Fonction extraire les caract\u00E8res entre deux indices sp\u00E9cifi\u00E9s partir d\'une cha\u00EEne
expression.info.extract.syntax=extraire (1. g\u00E9n\u00E9rale {})

expression.info.type.copy=copie
expression.info.copy.description=Cette fonction copie la valeur d\'un champ unifi\u00E9 \u00E0 un autre champ unifi\u00E9.
expression.info.copy.syntax=g\u00E9n\u00E9rale2 = copie (g\u00E9n\u00E9ral3, g\u00E9n\u00E9ral4)

expression.info.type.right.trim=trim droit
expression.info.right.trim.description=Il va r\u00E9duire la valeur de la bonne direction de la cha\u00EEne.
expression.info.right.trim.syntax=garniture droite (g\u00E9n\u00E9rale5 AA: BB)

expression.info.type.expression=Expression
expression.info.expression.description=Pour modifier la valeur de certains champs en appliquant expression math\u00E9matique.
expression.info.expression.syntax=g\u00E9n\u00E9raux2 = exp(g\u00E9n\u00E9ral15 * (100/g\u00E9n\u00E9rale16))

expression.info.type.notequalsto=!=
expression.info.notequalsto.description=Pas égal à
expression.info.notequalsto.syntax=général7! = général15

expression.info.type.equalsto=......
expression.info.equalsto.description=Égale à
expression.info.equalsto.syntax=général7 == général15

expression.info.type.lessthanorequalto=<=
expression.info.lessthanorequalto.description=Inférieur ou égal à
expression.info.lessthanorequalto.syntax=général7 <= général15

expression.info.type.lessthan=<
expression.info.lessthan.description=Moins que	
expression.info.lessthan.syntax=général7 <général15

expression.info.type.greaterthan=>
expression.info.greaterthan.description=Plus grand que	
expression.info.greaterthan.syntax=général7> général15

expression.info.type.greaterthanorequalto=......
expression.info.greaterthanorequalto.description=Supérieur ou égal à	
expression.info.greaterthanorequalto.syntax=général7> = général15

expression.info.type.logicaland=ET
expression.info.logicaland.description=Opérateur ET logique		
expression.info.logicaland.syntax=(général7 == général15) ET (général7! = général8)

expression.info.type.logicalor=OU
expression.info.logicalor.description=Opérateur OU logique		
expression.info.logicalor.syntax=(général7 == général15) OR (général7! = général8)

expression.info.type.logicalnot=!
expression.info.logicalnot.description=Opérateur NOT logique		
expression.info.logicalnot.syntax=! (Général7! = Général8)

expression.info.type.endWith=terminer par()
expression.info.endWith.description=Renvoie true si la chaîne d'argument se termine par la séquence spécifiée des valeurs char.
expression.info.endWith.syntax=EndWith (SourceUnitName, général35)

expression.info.type.isBlank=est vide()
expression.info.isBlank.description=Renvoie true si la chaîne d'argument est vide.		
expression.info.isBlank.syntax=IsBlank (général1), isBlank (remplacer (général25, "GP", "dataGp")) 

expression.info.type.startWith=commencer avec()	
expression.info.startWith.description=Renvoie true si la chaîne d'argument commence par la séquence spécifiée des valeurs char.		
expression.info.startWith.syntax=StartWith (SourceUnitName, général35)

expression.info.type.validateRegex=ValidateRegex ()
expression.info.validateRegex.description=Renvoie true si la chaîne d'argument est dans le format spécifié dans regex.		
expression.info.validateRegex.syntax=ValidateRegex (général3, "[5-9] +")

expression.info.type.inoperator=est dans()
expression.info.inoperator.description=Renvoie true si la première chaîne d'argument est IN seconde chaîne d'arguments qui peut être séparée par des virgules.
expression.info.inoperator.syntax=IsIn (général11, général12), isIn (général11, "1,2,3,4"), isIn (général11, "1; 2; 3; 4")

expression.info.type.isnull=IsNull ()
expression.info.isnull.description=Renvoie true si la chaîne d'argument est null.		
expression.info.isnull.syntax=IsNull (général11)

expression.info.type.isdategreaterthan=IsDateGreaterThan ()
expression.info.isdategreaterthan.description=Renvoie true si la première chaîne d'argument est supérieure à la deuxième chaîne d'argument.		
expression.info.isdategreaterthan.syntax=IsDateGreaterThan (StartDate, EndDate)

expression.info.type.isdatelessthan=IsDateLessThan ()
expression.info.isdatelessthan.description=Renvoie true si la chaîne du premier argument est inférieure à la chaîne du second argument.		
expression.info.isdatelessthan.syntax=IsDateLessThan (StartDate, EndDate)

expression.info.type.isdateequals=IsDateEquals ()
expression.info.isdateequals.description=Renvoie true si la chaîne des deux arguments est égale.	
expression.info.isdateequals.syntax=! IsDateEquals (StartDate, EndDate), isDateEquals (StartDate, formateDateAccordingToGMT (StartDate, 5, S))

expression.info.type.isdatevalid=isDateValid()
expression.info.isdatevalid.description=Renvoie true si la premire chane d'argument est convertie avec succs en date avec le format de date du deuxime argument.		
expression.info.isdatevalid.syntax=isDateValid(StartDate,"dd/MM/yyyy"),!isDateValid(StartDate,"dd/MM/yyyy")

expression.info.type.bestmatch=meilleure correspondance()
expression.info.bestmatch.description=Renvoie true si la première chaîne d'arguments commence par une deuxième chaîne d'arguments qui peut être séparée par des virgules.		
expression.info.bestmatch.syntax=BestMatch (général11, général12), bestMatch (général11, extrait (SourceUnitName, "G", "u"))


expression.info.type.absolute.expression=abdos()
expression.info.expression.absolute.description=Renvoie la valeur absolue de l'argument.
expression.info.expression.absolute.syntax=abdos(général3)

expression.info.type.addition.expression=ajouter()
expression.info.expression.addition.description=Renvoie le total des champs unifiés sélectionnés.
expression.info.expression.addition.syntax=général4=ajouter (général3, général11, général19)

expression.info.type.ceil.expression=plafond()
expression.info.expression.ceil.description=Arrondit un nombre vers le haut à l'entier le plus proche.
expression.info.expression.ceil.syntax=général4=plafond(général11)

expression.info.type.floor.expression=sol()
expression.info.expression.ceil.description=Arrondit un nombre vers le bas à l'entier le plus proche.
expression.info.expression.ceil.syntax=général4=sol(général11)

expression.info.type.DateDifference.expression=Obtenirladifférencededate()
expression.info.expression.DateDifference.description=Renvoie la différence de jours entre la date actuelle et la date de l'argument.
expression.info.expression.DateDifference.syntax=Datedefin=Obtenirladifférencededate(Datededébut)

expression.info.type.Hour.expression=Obtenirdel'heure()
expression.info.expression.Hour.description=Renvoie l'heure (de 0 à 23).
expression.info.expression.Hour.syntax=Datedefin=Obtenirdel'heure()

expression.info.type.Month.expression=Obtenirlemois()
expression.info.expression.Month.description=Renvoie le mois (de 0 à 11) Remarque: janvier est 0; Février est 1, et ainsi de suite.
expression.info.expression.Month.syntax=Datedefin=Obtenirlemois()

expression.info.type.WeekDay.expression=Obtenirunweek-end()
expression.info.expression.WeekDay.description=Renvoie le 'JOUR' (de 0 à 6). Note: Le dimanche est 0; Lundi est 1, et ainsi de suite.
expression.info.expression.WeekDay.syntax=Datedefin=Obtenirunweek-end()

expression.info.type.Year.expression=Obtenirl'année()
expression.info.expression.Year.description=Renvoie l'année (quatre chiffres).
expression.info.expression.Year.syntax=Datedefin=Obtenirl'année()

expression.info.type.max.expression=max()	
expression.info.expression.max.description=Renvoie le nombre avec la valeur la plus élevée.
expression.info.expression.max.syntax=général4=max(général2,général3,général4)

expression.info.type.min.expression=min()	
expression.info.expression.min.description=Renvoie le nombre avec la valeur la plus basse.
expression.info.expression.min.syntax=général4=min(général2,général3,général4)

expression.info.type.round.expression=rond()	
expression.info.expression.round.description=Arrondit la valeur de l'argument à l'entier le plus proche.
expression.info.expression.round.syntax=général4=rond(général2)

expression.info.type.random.expression=aléatoire()
expression.info.expression.random.description=Renvoie un nombre aléatoire.
expression.info.expression.random.syntax=général4=aléatoire(général2)

expression.info.type.concat.expression=concat()
expression.info.expression.concat.description=Associe deux chaînes ou plus de l'argument et renvoie une copie des chaînes jointes.
expression.info.expression.concat.syntax=général1=concat(général19,général25)

expression.info.type.copy.expression=copie()
expression.info.expression.copy.description=Renvoie une copie de la valeur de l'argument.	
expression.info.expression.copy.syntax=général1=copie(général25)

expression.info.type.sysDate.expression=sysDate()
expression.info.expression.sysDate.description=Renvoie la date actuelle du système.	
expression.info.expression.sysDate.syntax=général1=sysDate

expression.info.type.dateFormat.expression=formatdedate()
expression.info.expression.dateFormat.description=Renvoie la date avec le format modifié tel que spécifié dans le deuxième champ.	
expression.info.expression.dateFormat.syntax=général1=formatdedate(NoteStream,"aaaa/mm/jj")

expression.info.type.formatDateToLong.expression=formatDateàlongue()
expression.info.expression.formatDateToLong.description=Renvoie la valeur longue de la date donnée.		
expression.info.expression.formatDateToLong.syntax=general1=formatDateToLong(RatingStream,"yyyy/mm/dd")

expression.info.type.hexToDec.expression=hexToDec()
expression.info.expression.hexToDec.description=Renvoie la valeur décimale de la valeur de l'argument.		
expression.info.expression.hexToDec.syntax=général1=hexToDec(general2)

expression.info.type.hexToString.expression=hexToString()
expression.info.expression.hexToString.description=Renvoie la valeur hexadécimale de la valeur de l'argument.		
expression.info.expression.hexToString.syntax=général1=hexToString(général2)

expression.info.type.isTimeBetween.expression=Estletempsentre()
expression.info.expression.isTimeBetween.description=Renvoie true si l'heure actuelle est comprise entre l'heure de début et la fin.		
expression.info.expression.isTimeBetween.syntax=général1=Estletempsentre("20/10/2013","23/10/2013")

expression.info.type.isTimeBetween.expression=Estletempsentre()
expression.info.expression.isTimeBetween.description=Renvoie true si l'heure actuelle est comprise entre l'heure de début et la fin.		
expression.info.expression.isTimeBetween.syntax=general1=isTimeBetween("20/10/2013","23/10/2013")

expression.info.type.trim.expression=réduire()
expression.info.expression.trim.description=Supprime l'espace blanc des deux extrémités de la chaîne.		
expression.info.expression.trim.syntax=general1=trim(general25)

expression.info.type.leftTrim.expression=gauchetrim()
expression.info.expression.leftTrim.description=Supprime l'espace blanc de l'extrémité gauche de la chaîne.		
expression.info.expression.leftTrim.syntax=general1=leftTrim(SourceUnitName,general25)

expression.info.type.length.expression=longueur()
expression.info.expression.length.description=Renvoie la longueur de la valeur de l'argument.		
expression.info.expression.length.syntax=general1=length(general25)

expression.info.type.toUpperCase.expression=àUpperCase()
expression.info.expression.toUpperCase.description=Convertit la valeur de l'argument en lettres majuscules.		
expression.info.expression.toUpperCase.syntax=general1=toUpperCase(general25)

expression.info.type.toLowerCase.expression=àminuscule()
expression.info.expression.toLowerCase.description=Convertit la valeur de l'argument en lettres minuscules.		
expression.info.expression.toLowerCase.syntax=general1=toLowerCase(general25)

expression.info.type.netmatch.expression=netmatch()
expression.info.expression.netmatch.description=Renvoie true si l'adresse IP du premier argument est dans la plage du second argument.		
expression.info.expression.netmatch.syntax=general1=netmatch(general7,"223.196.24.125/30") or general1=netmatch(general7, "223.196.24.123-223.196.24.127")

expression.info.type.now.expression=maintenant()
expression.info.expression.now.description=Renvoie la date actuelle.		
expression.info.expression.now.syntax=general1=now

expression.info.type.removeFiller.expression=supprimerFiller()
expression.info.expression.removeFiller.description=Supprimez le remplissage de la valeur de l'argument.		
expression.info.expression.removeFiller.syntax=general1=removeFiller(general25)

expression.info.type.replace.expression=remplacer()
expression.info.expression.replace.description=Recherche une correspondance entre une sous-chaîne et une chaîne et remplace la sous-chaîne appariée par une nouvelle sous-chaîne.		
expression.info.expression.replace.syntax=general1=replace(general25,"GP","dataGp")

expression.info.type.replaceAll.expression=remplacetout()
expression.info.expression.replaceAll.description=Recherche une correspondance pour l'expression régulière spécifiée et remplace la sous-chaîne appariée par une nouvelle sous-chaîne.		
expression.info.expression.replaceAll.syntax=general1=general1=replaceAll(general25,"[0-9]+","replace1")

expression.info.type.replaceFirst.expression=remplacerFirst()
expression.info.expression.replaceFirst.description=Recherche une correspondance pour l'expression régulière spécifiée et remplace la première sous-chaîne appariée par une nouvelle sous-chaîne.		
expression.info.expression.replaceFirst.syntax=general1=replaceFirst(general25,"[0-9]+","replace1")

expression.info.type.subString.expression=Sous-chaîne()
expression.info.expression.subString.description=Extrait les caractères d'une chaîne, entre deux points d'extrémité spécifiés.		
expression.info.expression.subString.syntax=general1=subString(general25,"start","end")

expression.info.type.strip.expression=bande()
expression.info.expression.strip.description=Retourne une copie de la chaîne dans laquelle tous les caractères ont été supprimés du début ou de la fin de la chaîne.			
expression.info.expression.strip.syntax=general1=strip(general25,"T","2") or general1=strip(general25,"L","2")

expression.info.type.swapNibble.expression=swapNibble()
expression.info.expression.swapNibble.description=Retourne la chaîne après avoir échangé des points.			
expression.info.expression.swapNibble.syntax=general1=swapNibble(general25)

expression.info.type.formateDateAccordingToGMT.expression=formateDateAccordingToGMT()
expression.info.expression.formateDateAccordingToGMT.description=Renvoie la date en ajoutant la valeur entière donnée dans le second argument à Hour, Minute ou Second définie dans le troisième argument.			
expression.info.expression.formateDateAccordingToGMT.syntax=EventType=formateDateAccordingToGMT(StartDate,0,S) # (dateField, integer,H/M/S)

expression.info.type.merge.expression=fusionner()
expression.info.expression.merge.description=Fusionne les champs unifiés du premier et du second argument et utilise le troisième argument comme délimiteur.			
expression.info.expression.merge.syntax=merge(general2,general3,general6),merge(general2,genral3,@),merge(general2,Literal,general6),merge(first,second,@)

expression.info.type.subStringWithChars.expression=subStringWithChars()
expression.info.expression.subStringWithChars.description=Retourne la sous-chaîne avec caractère jusqu'à la longueur définie dans le troisième argument.
expression.info.expression.subStringWithChars.syntax=EventType=subStringWithChars(BPartyMDN,1800,4)

expression.info.type.lpad.expression=lpad()
expression.info.expression.lpad.description=Remplissage gauche dans le champ unifié donné jusqu'à la longueur donnée dans le second argument			
expression.info.expression.lpad.syntax=EventType=lpad(BPartyMDN,15,0)

expression.info.type.rpad.expression=rpad()
expression.info.expression.rpad.description=Remplissage droit dans le champ unifié donné jusqu'à la longueur donnée dans le second argument			
expression.info.expression.rpad.syntax=EventType=rpad(BPartyMDN,15,0)
