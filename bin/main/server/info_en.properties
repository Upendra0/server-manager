expression.info.type.static=Static
expression.info.static.description=Static Condition
expression.info.static.syntax={Unified Field} Operator {value}

expression.info.type.extract=Extract
expression.info.extract.description=Function extract the characters between two specified indices from a string
expression.info.extract.syntax=extract(general1.{})

expression.info.type.copy=Copy
expression.info.copy.description=This function will copies the value of one unified field to another unified field.
expression.info.copy.syntax=general2=copy(general3,general4)

expression.info.type.right.trim=Right Trim
expression.info.right.trim.description=It will trim the value from right direction of the string.
expression.info.right.trim.syntax=general1=rightTrim(general5,'AA':'BB')

expression.info.type.expression=Expression
expression.info.expression.description=To modify the value of certain field by applying mathematical expression.
expression.info.expression.syntax=general2=exp(${general15}*(100/${general16}))

expression.info.type.notequalsto=!=
expression.info.notequalsto.description=Not Equals To
expression.info.notequalsto.syntax=general7!=general15

expression.info.type.equalsto===
expression.info.equalsto.description=Equals To
expression.info.equalsto.syntax=general7==general15

expression.info.type.lessthanorequalto=<=
expression.info.lessthanorequalto.description=Less Than or Equal To
expression.info.lessthanorequalto.syntax=general7<=general15

expression.info.type.lessthan=<
expression.info.lessthan.description=Less Than	
expression.info.lessthan.syntax=general7 < general15

expression.info.type.greaterthan=>
expression.info.greaterthan.description=Greater Than	
expression.info.greaterthan.syntax=general7>general15

expression.info.type.greaterthanorequalto=>=
expression.info.greaterthanorequalto.description=Greater Than or Equals To	
expression.info.greaterthanorequalto.syntax=general7>=general15

expression.info.type.logicaland=AND
expression.info.logicaland.description=Logical AND operator		
expression.info.logicaland.syntax=( general7==general15 ) AND ( general7!=general8 )

expression.info.type.logicalor=OR
expression.info.logicalor.description=Logical OR operator		
expression.info.logicalor.syntax=( general7==general15 ) OR ( general7!=general8 )

expression.info.type.logicalnot=!
expression.info.logicalnot.description=Logical NOT operator		
expression.info.logicalnot.syntax=!( general7!=general8 )

expression.info.type.endWith=endWith()
expression.info.endWith.description=Returns true if the argument string ends with the specified sequence of char values.
expression.info.endWith.syntax=endWith(SourceUnitName,general35),!endWith(SourceUnitName,general35)

expression.info.type.isBlank=isBlank()
expression.info.isBlank.description=Returns true if the argument string is blank.		
expression.info.isBlank.syntax=isBlank(general1),!isBlank(general1) 

expression.info.type.startWith=startWith()	
expression.info.startWith.description=Returns true if the argument string starts with the specified sequence of char values.		
expression.info.startWith.syntax=startWith(SourceUnitName,general35),!startWith(SourceUnitName,general35)

expression.info.type.validateRegex=validateRegex()
expression.info.validateRegex.description=Returns true if the argument string is in the format specified in regex.		
expression.info.validateRegex.syntax=validateRegex(general3,"[5-9]+")

expression.info.type.inoperator=isIn()
expression.info.inoperator.description=Returns true if the first argument string is IN second argument string which can be comma-separated.
expression.info.inoperator.syntax=isIn(general11,general12),isIn(general11,"1,2,3,4"),isIn(general11,"1;2;3;4"),!isIn(general11,general12)

expression.info.type.isnull=isNull()
expression.info.isnull.description=Returns true if the argument string is null.		
expression.info.isnull.syntax=isNull(general11),!isNull(general11)

expression.info.type.isdategreaterthan=isDateGreaterThan()
expression.info.isdategreaterthan.description=Returns true if the first argument string is greater than second argument string.		
expression.info.isdategreaterthan.syntax=isDateGreaterThan(StartDate,EndDate),!isDateGreaterThan(StartDate,EndDate)

expression.info.type.isdatelessthan=isDateLessThan()
expression.info.isdatelessthan.description=Returns true if the first argument string is less than second argument string.		
expression.info.isdatelessthan.syntax=isDateLessThan(StartDate,EndDate),!isDateLessThan(StartDate,EndDate)

expression.info.type.isdateequals=isDateEquals()
expression.info.isdateequals.description=Returns true if the both argument string is equal.	
expression.info.isdateequals.syntax=!isDateEquals(StartDate,EndDate),isDateEquals(StartDate,formateDateAccordingToGMT(StartDate,5,S))

expression.info.type.isdatevalid=isDateValid()
expression.info.isdatevalid.description=Returns true if the first argument string is successfully converted to date with the second argument date format.		
expression.info.isdatevalid.syntax=isDateValid(StartDate,"dd/MM/yyyy"),!isDateValid(StartDate,"dd/MM/yyyy")

expression.info.type.bestmatch=bestMatch()
expression.info.bestmatch.description=Returns true if the first argument string starts with second argument string which can be comma-separated.		
expression.info.bestmatch.syntax=bestMatch(general11,general12),bestMatch(general11,extract(SourceUnitName,"G","u"))

expression.info.type.contains=Contains()
expression.info.contains.description=Returns true if the argument string contains the specified sequence of char values.
expression.info.contains.syntax=contains(SourceUnitName,general25),!contains(SourceUnitName,general25)

expression.info.type.extract=Extract
expression.info.extract.description=Function extract the characters between two specified indices from a string
expression.info.extract.syntax=extract(general1.{})

expression.info.type.absolute.expression=abs()
expression.info.expression.absolute.description=Returns the absolute value of the argument.
expression.info.expression.absolute.syntax=general1=abs(general3)

expression.info.type.addition.expression=add()
expression.info.expression.addition.description=Returns the Total of selected Unified Fields.
expression.info.expression.addition.syntax=general4=add(general3,general11,general19)

expression.info.type.ceil.expression=ceil()
expression.info.expression.ceil.description=Rounds a number upwards to the nearest integer.
expression.info.expression.ceil.syntax=general4=ceil(general11)

expression.info.type.floor.expression=floor()
expression.info.expression.floor.description=Rounds a number downwards to the nearest integer.
expression.info.expression.floor.syntax=general4=floor(general11)

expression.info.type.DateDifference.expression=getDateDifference()
expression.info.expression.DateDifference.description=Returns difference of days between current date and the argument date.
expression.info.expression.DateDifference.syntax=EndDate=getDateDifference(StartDate)

expression.info.type.Hour.expression=getHour()
expression.info.expression.Hour.description=Returns the hour (from 0-23).
expression.info.expression.Hour.syntax=EndDate=getHour()

expression.info.type.Month.expression=getMonth()
expression.info.expression.Month.description=Returns the month (from 0-11) Note: January is 0; February is 1, and so on.
expression.info.expression.Month.syntax=EndDate=getMonth()

expression.info.type.WeekDay.expression=getWeekDay()
expression.info.expression.WeekDay.description=Returns the 'DAY' (from 0 to 6). Note : Sunday is 0; Monday is 1, and so on.
expression.info.expression.WeekDay.syntax=EndDate=getWeekDay()

expression.info.type.Year.expression=getYear()
expression.info.expression.Year.description=Returns the year (four digits).
expression.info.expression.Year.syntax=EndDate=getYear()

expression.info.type.max.expression=max()	
expression.info.expression.max.description=Returns the number with the highest value.
expression.info.expression.max.syntax=general4=max(general2,general3,general4)

expression.info.type.min.expression=min()	
expression.info.expression.min.description=Returns the number with the lowest value.
expression.info.expression.min.syntax=general4=min(general2,general3,general4)

expression.info.type.round.expression=round()	
expression.info.expression.round.description=Rounds the argument value to the nearest integer.
expression.info.expression.round.syntax=general4=round(general2)

expression.info.type.random.expression=random()
expression.info.expression.random.description=Returns a random number.
expression.info.expression.random.syntax=general4=random(general2)

expression.info.type.concat.expression=concat()
expression.info.expression.concat.description=Joins two or more strings from the argument, and returns a copy of the joined strings.
expression.info.expression.concat.syntax=general1=concat(general19,general25)

expression.info.type.copy.expression=copy()
expression.info.expression.copy.description=Returns copy of the argument value.	
expression.info.expression.copy.syntax=general1=copy(general25)

expression.info.type.sysDate.expression=sysDate
expression.info.expression.sysDate.description=Returns current system date.	
expression.info.expression.sysDate.syntax=general1=sysDate

expression.info.type.dateFormat.expression=dateFormat()
expression.info.expression.dateFormat.description=Returns date with changed format as specified in second field.	
expression.info.expression.dateFormat.syntax=general1=dateFormat(RatingStream,"yyyy/mm/dd")

expression.info.type.extract.expression=extract()
expression.info.expression.extract.description=Returns extracted string from first argument value according to second and third argument.		
expression.info.expression.extract.syntax=general1=extract(SourceUnitName,"G","u")

expression.info.type.formatDateToLong.expression=formatDateToLong()
expression.info.expression.formatDateToLong.description=Returns long value of given date.		
expression.info.expression.formatDateToLong.syntax=general1=formatDateToLong(RatingStream,"yyyy/mm/dd")

expression.info.type.hexToDec.expression=hexToDec()
expression.info.expression.hexToDec.description=Returns decimal value for the argument value.		
expression.info.expression.hexToDec.syntax=general1=hexToDec(general2)

expression.info.type.hexToString.expression=hexToString()
expression.info.expression.hexToString.description=Returns hexadecimal value for the argument value.		
expression.info.expression.hexToString.syntax=general1=hexToString(general2)

expression.info.type.isTimeBetween.expression=isTimeBetween()
expression.info.expression.isTimeBetween.description=Returns true if current time is between start and end time.		
expression.info.expression.isTimeBetween.syntax=general1=isTimeBetween("20/10/2013","23/10/2013")

expression.info.type.isTimeBetween.expression=isTimeBetween()
expression.info.expression.isTimeBetween.description=Returns true if current time is between start and end time.		
expression.info.expression.isTimeBetween.syntax=general1=isTimeBetween("20/10/2013","23/10/2013")

expression.info.type.trim.expression=trim()
expression.info.expression.trim.description=Removes white space from both ends of the string.		
expression.info.expression.trim.syntax=general1=trim(general25)

expression.info.type.leftTrim.expression=leftTrim()
expression.info.expression.leftTrim.description=Removes white space from left end of the string.		
expression.info.expression.leftTrim.syntax=general1=leftTrim(SourceUnitName,general25)

expression.info.type.length.expression=length()
expression.info.expression.length.description=Returns length of the argument value.		
expression.info.expression.length.syntax=general1=length(general25)

expression.info.type.toUpperCase.expression=toUpperCase()
expression.info.expression.toUpperCase.description=Converts the argument value to uppercase letters.		
expression.info.expression.toUpperCase.syntax=general1=toUpperCase(general25)

expression.info.type.toLowerCase.expression=toLowerCase()
expression.info.expression.toLowerCase.description=Converts the argument value to lowercase letters.		
expression.info.expression.toLowerCase.syntax=general1=toLowerCase(general25)

expression.info.type.netmatch.expression=netmatch()
expression.info.expression.netmatch.description=Returns true if the IP address of the first argument is in the range of the second argument.		
expression.info.expression.netmatch.syntax=general1=netmatch(general7,"223.196.24.125/30") or general1=netmatch(general7, "223.196.24.123-223.196.24.127")

expression.info.type.now.expression=now()
expression.info.expression.now.description=Returns current date.		
expression.info.expression.now.syntax=general1=now()

expression.info.type.removeFiller.expression=removeFiller()
expression.info.expression.removeFiller.description=Remove filler from the argument value.		
expression.info.expression.removeFiller.syntax=general1=removeFiller(general25)

expression.info.type.replace.expression=replace()
expression.info.expression.replace.description=Searches for a match between a substring and a string, and replaces the matched substring with a new substring.		
expression.info.expression.replace.syntax=general1=replace(general25,"GP","dataGp")

expression.info.type.replaceAll.expression=replaceAll()
expression.info.expression.replaceAll.description=Searches for a match for the specified regular expression, and replaces the matched substring with a new substring.		
expression.info.expression.replaceAll.syntax=general1=replaceAll(general25,"[0-9]+","replace1")

expression.info.type.replaceFirst.expression=replaceFirst()
expression.info.expression.replaceFirst.description=Searches for a match for the specified regular expression, and replaces the first matched substring with a new substring.		
expression.info.expression.replaceFirst.syntax=general1=replaceFirst(general25,"[0-9]+","replace1")

expression.info.type.subString.expression=subString()
expression.info.expression.subString.description=Extracts the characters from a string, between two specified end points.		
expression.info.expression.subString.syntax=general1=subString(general23,'0','5')

expression.info.type.strip.expression=strip()
expression.info.expression.strip.description=Returns a copy of the string in which all chars have been stripped from the beginning or the end of the string.			
expression.info.expression.strip.syntax=general1=strip(general25,"T","2")

expression.info.type.swapNibble.expression=swapNibble()
expression.info.expression.swapNibble.description=Returns string after swapping nibbles of it.			
expression.info.expression.swapNibble.syntax=general1=swapNibble(general25)

expression.info.type.formateDateAccordingToGMT.expression=formateDateAccordingToGMT()
expression.info.expression.formateDateAccordingToGMT.description=Returns the date by adding or subtracting the integer value given in second argument as to Hour,Minute or Second defined in third argument according to fourth argument.			
expression.info.expression.formateDateAccordingToGMT.syntax=EventType=formateDateAccordingToGMT(StartDate,'0','S','ADD') # (dateField, integer,H/M/S,ADD/SUB)

expression.info.type.merge.expression=merge()
expression.info.expression.merge.description=Merges the unified fields of first and second argument and uses third argument as delimeter.			
expression.info.expression.merge.syntax=general2=merge(general2,general3,general6),general2=merge(general2,'Literal',general6),general5=merge(general5,general6,'@')

expression.info.type.subStringWithChars.expression=subStringWithChars()
expression.info.expression.subStringWithChars.description=Returns substring with character upto the length defined in third argument.			
expression.info.expression.subStringWithChars.syntax=EventType=subStringWithChars(BPartyMDN,'c','4')

expression.info.type.lpad.expression=lpad()
expression.info.expression.lpad.description=Left padding in the given unified field upto length given in second argument			
expression.info.expression.lpad.syntax=EventType=lpad(BPartyMDN,'15','0')

expression.info.type.rpad.expression=rpad()
expression.info.expression.rpad.description=Right padding in the given unified field upto length given in second argument			
expression.info.expression.rpad.syntax=EventType=rpad(BPartyMDN,'15','0')

